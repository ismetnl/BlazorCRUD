@page "/"
@using System.Drawing
@using BlazorLeaflet.Models
@inject IJSRuntime jsRuntime

@inject AirportServices service

<h1 >Airports MAP</h1>

<div class="form-inline m-2">
    <div class="form-group mb-2">
        <input class="form-control ml-2 mr-2" placeholder="Airport name" @bind="AirportName" />
    </div>
    <button class="btn btn-primary mb-2" @onclick="FindAirport">Search</button>
    <button class="btn btn-primary mb-2" @onclick="ClearMap">Clear</button>
    <button class="btn btn-primary mb-2" @onclick="UpdateMapMaker">Show Airports</button>
</div>

<div style="height: 500px; width: 500px;">
    <LeafletMap Map="_map" />
</div>

@code
{ private Map _map;

    private Circle _circle;

    protected override void OnInitialized()
    {
        _map = new Map(jsRuntime)
        {
            Center = _startAt,
            Zoom = 4.8f
        };

        _map.OnInitialized += () =>
        {
            _map.AddLayer(new TileLayer
            {
                UrlTemplate = "https://a.tile.openstreetmap.org/{z}/{x}/{y}.png",
                Attribution = "&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors",
            });

            
        };
    }

    private LatLng _startAt = new LatLng(38.815747f, 35.356078f);
    public string AirportName { get; set; }
    List<Airport> Airports = new List<Airport>();

    private void ClearMap()
    {
        bool Switch = true;
        foreach (var layer in _map.GetLayers())
        {
            if (Switch == true)
            {
                Switch = false;
                continue;
            }
            _map.RemoveLayer(layer);
        }
    }
    private void FindAirport()
    {
        var Airport = service.FindAirport(AirportName);
        if (Airport != null)
        {
            ClearMap();

            var LatLng = new LatLng((float)Airport.Latitude, (float)Airport.Longitude);
            var marker = new Marker(LatLng)
            {
                Icon = new Icon
                {
                    Url = "https://cdn4.iconfinder.com/data/icons/ionicons/512/icon-plane-512.png",
                    ClassName = "map-icon"
                },

                Draggable = false,
                Title = Airport.Name,
                Popup = new Popup { Content = string.Format("I am at {0:0.00}° lat, {1:0.00}° lng", LatLng.Lat, LatLng.Lng) }
            };

            _map.AddLayer(marker);
        }
    }


    private async Task UpdateMapMaker()
    {
        //await service.AddProductAsync(NewProduct);
        //NewProduct = new Product();
        //await RefreshProducts();

        Airports = await service.GetAirportAsync();

        ClearMap();

        if (Airports.Any())
        {
            foreach (var Airport in Airports)
            {


                var LatLng = new LatLng((float)Airport.Latitude, (float)Airport.Longitude);
                var marker = new Marker(LatLng)
                {
                    Icon = new Icon
                    {
                        Url = "https://cdn4.iconfinder.com/data/icons/ionicons/512/icon-plane-512.png",
                        ClassName = "map-icon"
                    },


                    Draggable = false,
                    Title = Airport.Name,
                    Popup = new Popup { Content = string.Format("I am at {0:0.00}° lat, {1:0.00}° lng", LatLng.Lat, LatLng.Lng) }

                };

                _map.AddLayer(marker);



            }
        }


    }



    private void ZoomMap()
    {
        _map.FitBounds(new PointF(45.943f, 24.967f), new PointF(46.943f, 25.967f), maxZoom: 5f);
    }

    private void PanToNY()
    {
        _map.PanTo(new PointF(40.713185f, -74.0072333f), animate: true, duration: 10f);
    }




    }
